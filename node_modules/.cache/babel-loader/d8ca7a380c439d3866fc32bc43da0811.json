{"ast":null,"code":"var _jsxFileName = \"/Users/user/WebstormProjects/github/React-Redux-ToDo-App/src/components/organisms/forms/PostForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Input } from \"src/components/atoms/Input\";\nimport { Button } from \"src/components/atoms/buttons/Button\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PostForm = _ref => {\n  _s();\n\n  let {\n    update,\n    setModal,\n    isEdit,\n    editedPost\n  } = _ref;\n  const {\n    items\n  } = useSelector(state => state.posts);\n  console.log(items.forEach(el => {\n    console.log(el.title === editedPost.id); // if (el.id === editedPost.id) {\n    //   el.title = \"Ntw\";\n    //   el.body = \"Newwwwww\";\n    // }\n  }));\n  const [post, setPost] = useState({\n    title: (editedPost === null || editedPost === void 0 ? void 0 : editedPost.title) || \"\",\n    body: (editedPost === null || editedPost === void 0 ? void 0 : editedPost.body) || \"\"\n  });\n\n  const updatePost = e => {\n    e.preventDefault();\n\n    if (!isEdit) {\n      const newPost = { ...post,\n        id: Date.now()\n      };\n      update(newPost);\n    } else {\n      const updatingPosts = items.forEach(el => {\n        if (el.id === editedPost.id) {\n          el.title = post.title || \"\";\n          el.body = post.body || \"\";\n        }\n      });\n      console.log(updatingPosts); // update(editedPost);\n    }\n\n    setPost({\n      title: \"\",\n      body: \"\"\n    });\n    setModal(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      value: post.title,\n      onChange: e => setPost({ ...post,\n        title: e.target.value\n      }),\n      type: \"text\",\n      placeholder: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0437\\u0430\\u043C\\u0435\\u0442\\u043A\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      value: post.body,\n      onChange: e => setPost({ ...post,\n        body: e.target.value\n      }),\n      type: \"text\",\n      placeholder: \"\\u041E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435 \\u0437\\u0430\\u043C\\u0435\\u0442\\u043A\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: updatePost,\n      children: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostForm, \"AwEFeEbxfEwG/XDZs/SuckJwywQ=\", false, function () {\n  return [useSelector];\n});\n\n_c = PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["/Users/user/WebstormProjects/github/React-Redux-ToDo-App/src/components/organisms/forms/PostForm.jsx"],"names":["React","useState","Input","Button","useSelector","PostForm","update","setModal","isEdit","editedPost","items","state","posts","console","log","forEach","el","title","id","post","setPost","body","updatePost","e","preventDefault","newPost","Date","now","updatingPosts","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Input } from \"src/components/atoms/Input\";\nimport { Button } from \"src/components/atoms/buttons/Button\";\nimport { useSelector } from \"react-redux\";\n\nexport const PostForm = ({ update, setModal, isEdit, editedPost }) => {\n  const { items } = useSelector((state) => state.posts);\n\n  console.log(\n    items.forEach((el) => {\n      console.log(el.title === editedPost.id);\n      // if (el.id === editedPost.id) {\n      //   el.title = \"Ntw\";\n      //   el.body = \"Newwwwww\";\n      // }\n    }),\n  );\n\n  const [post, setPost] = useState({\n    title: editedPost?.title || \"\",\n    body: editedPost?.body || \"\",\n  });\n\n  const updatePost = (e) => {\n    e.preventDefault();\n\n    if (!isEdit) {\n      const newPost = {\n        ...post,\n        id: Date.now(),\n      };\n\n      update(newPost);\n    } else {\n      const updatingPosts = items.forEach((el) => {\n        if (el.id === editedPost.id) {\n          el.title = post.title || \"\";\n          el.body = post.body || \"\";\n        }\n      });\n\n      console.log(updatingPosts);\n      // update(editedPost);\n    }\n\n    setPost({ title: \"\", body: \"\" });\n\n    setModal(false);\n  };\n\n  return (\n    <form>\n      <Input\n        value={post.title}\n        onChange={(e) => setPost({ ...post, title: e.target.value })}\n        type=\"text\"\n        placeholder=\"Название заметки\"\n      />\n\n      <Input\n        value={post.body}\n        onChange={(e) => setPost({ ...post, body: e.target.value })}\n        type=\"text\"\n        placeholder=\"Описание заметки\"\n      />\n\n      <Button onClick={updatePost}>Сохранить</Button>\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}