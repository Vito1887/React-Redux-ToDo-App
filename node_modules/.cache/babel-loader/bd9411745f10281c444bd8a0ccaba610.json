{"ast":null,"code":"var _jsxFileName = \"/Users/user/WebstormProjects/github/React-Redux-ToDo-App/src/components/organisms/forms/PostForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Input } from \"src/components/atoms/Input\";\nimport { Button } from \"src/components/atoms/buttons/Button\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PostForm = _ref => {\n  _s();\n\n  let {\n    update,\n    setModal,\n    isEdit,\n    editedPost\n  } = _ref;\n  const {\n    items\n  } = useSelector(state => state.posts);\n  const [posts, setPosts] = useState(items || []);\n  let array = [{\n    id: 1,\n    title: \"Купить молоко\",\n    body: \"Потребуется 2 литра молока.\"\n  }, {\n    id: 2,\n    title: \"Купить муку\",\n    body: \"Для приготовления яблочного пирога необходима мука (1 пачка).\"\n  }, {\n    id: 3,\n    title: \"Купить творог\",\n    body: \"На завтрак.\"\n  }, {\n    id: 4,\n    title: \"Купить сметану и сахар\",\n    body: \"Для творога.\"\n  }];\n  let u = items;\n  console.log(items[(editedPost === null || editedPost === void 0 ? void 0 : editedPost.id) - 1].title); // console.log(\n  //   setPosts(\n  //     (posts || [])?.forEach((el) => {\n  //       console.log(el.title === editedPost.id);\n  //\n  //       if (el.id === editedPost?.id) {\n  //         el.title = \"Ntw\";\n  //         el.body = \"Newwwwww\";\n  //       }\n  //     }),\n  //   ),\n  // );\n  // console.log(setPosts(posts.splice(0, 1)));\n  // console.log(\n  //   posts.concat(newPost).forEach((el) => {\n  //     if (el.id === editedPost?.id) {\n  //       el.title = \"Ntw\";\n  //       el.body = \"Newwwwww\";\n  //     }\n  //   }),\n  // );\n\n  const [post, setPost] = useState({\n    title: (editedPost === null || editedPost === void 0 ? void 0 : editedPost.title) || \"\",\n    body: (editedPost === null || editedPost === void 0 ? void 0 : editedPost.body) || \"\"\n  });\n\n  const updatePost = e => {\n    e.preventDefault();\n\n    if (!isEdit) {\n      const newPost = { ...post,\n        id: Date.now()\n      };\n      update(newPost);\n    } else {\n      const updatingPosts = items.forEach(el => {\n        if (el.id === (editedPost === null || editedPost === void 0 ? void 0 : editedPost.id)) {\n          el.title = (post === null || post === void 0 ? void 0 : post.title) || \"\";\n          el.body = (post === null || post === void 0 ? void 0 : post.body) || \"\";\n        }\n      });\n      console.log(updatingPosts); // update(editedPost);\n      // console.log(items?.filter((el) => el.id !== editedPost.id));\n    }\n\n    setPost({\n      title: \"\",\n      body: \"\"\n    });\n    setModal(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      value: post.title,\n      onChange: e => setPost({ ...post,\n        title: e.target.value\n      }),\n      type: \"text\",\n      placeholder: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0437\\u0430\\u043C\\u0435\\u0442\\u043A\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      value: post.body,\n      onChange: e => setPost({ ...post,\n        body: e.target.value\n      }),\n      type: \"text\",\n      placeholder: \"\\u041E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435 \\u0437\\u0430\\u043C\\u0435\\u0442\\u043A\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: updatePost,\n      children: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostForm, \"Vwemxqp05YbW6rvBWyCYFMeqzOk=\", false, function () {\n  return [useSelector];\n});\n\n_c = PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["/Users/user/WebstormProjects/github/React-Redux-ToDo-App/src/components/organisms/forms/PostForm.jsx"],"names":["React","useState","Input","Button","useSelector","PostForm","update","setModal","isEdit","editedPost","items","state","posts","setPosts","array","id","title","body","u","console","log","post","setPost","updatePost","e","preventDefault","newPost","Date","now","updatingPosts","forEach","el","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Input } from \"src/components/atoms/Input\";\nimport { Button } from \"src/components/atoms/buttons/Button\";\nimport { useSelector } from \"react-redux\";\n\nexport const PostForm = ({ update, setModal, isEdit, editedPost }) => {\n  const { items } = useSelector((state) => state.posts);\n\n  const [posts, setPosts] = useState(items || []);\n\n  let array = [\n    {\n      id: 1,\n      title: \"Купить молоко\",\n      body: \"Потребуется 2 литра молока.\",\n    },\n    {\n      id: 2,\n      title: \"Купить муку\",\n      body: \"Для приготовления яблочного пирога необходима мука (1 пачка).\",\n    },\n    {\n      id: 3,\n      title: \"Купить творог\",\n      body: \"На завтрак.\",\n    },\n    {\n      id: 4,\n      title: \"Купить сметану и сахар\",\n      body: \"Для творога.\",\n    },\n  ];\n\n  let u = items;\n\n  console.log(items[editedPost?.id - 1].title );\n\n  // console.log(\n  //   setPosts(\n  //     (posts || [])?.forEach((el) => {\n  //       console.log(el.title === editedPost.id);\n  //\n  //       if (el.id === editedPost?.id) {\n  //         el.title = \"Ntw\";\n  //         el.body = \"Newwwwww\";\n  //       }\n  //     }),\n  //   ),\n  // );\n\n  // console.log(setPosts(posts.splice(0, 1)));\n\n  // console.log(\n  //   posts.concat(newPost).forEach((el) => {\n  //     if (el.id === editedPost?.id) {\n  //       el.title = \"Ntw\";\n  //       el.body = \"Newwwwww\";\n  //     }\n  //   }),\n  // );\n\n  const [post, setPost] = useState({\n    title: editedPost?.title || \"\",\n    body: editedPost?.body || \"\",\n  });\n\n  const updatePost = (e) => {\n    e.preventDefault();\n\n    if (!isEdit) {\n      const newPost = {\n        ...post,\n        id: Date.now(),\n      };\n\n      update(newPost);\n    } else {\n      const updatingPosts = items.forEach((el) => {\n        if (el.id === editedPost?.id) {\n          el.title = post?.title || \"\";\n          el.body = post?.body || \"\";\n        }\n      });\n\n      console.log(updatingPosts);\n      // update(editedPost);\n\n      // console.log(items?.filter((el) => el.id !== editedPost.id));\n    }\n\n    setPost({ title: \"\", body: \"\" });\n\n    setModal(false);\n  };\n\n  return (\n    <form>\n      <Input\n        value={post.title}\n        onChange={(e) => setPost({ ...post, title: e.target.value })}\n        type=\"text\"\n        placeholder=\"Название заметки\"\n      />\n\n      <Input\n        value={post.body}\n        onChange={(e) => setPost({ ...post, body: e.target.value })}\n        type=\"text\"\n        placeholder=\"Описание заметки\"\n      />\n\n      <Button onClick={updatePost}>Сохранить</Button>\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}