{"ast":null,"code":"var _jsxFileName = \"/Users/user/WebstormProjects/github/React-Redux-ToDo-App/src/components/organisms/forms/PostForm.tsx\",\n  _s = $RefreshSig$();\nimport { Input } from 'src/components/atoms/Input';\nimport { Button } from 'src/components/atoms/buttons/Button';\nimport React, { useState } from 'react';\nimport { updateItem } from \"src/redux/reducers/posts.ts\";\nimport { useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const PostForm = _ref => {\n  _s();\n  let {\n    update,\n    setModal,\n    isEdit = false,\n    selectedPost\n  } = _ref;\n  const dispatch = useDispatch();\n  const [post, setPost] = useState({\n    title: (selectedPost === null || selectedPost === void 0 ? void 0 : selectedPost.title) || '',\n    body: (selectedPost === null || selectedPost === void 0 ? void 0 : selectedPost.body) || ''\n  });\n  const updatePost = () => {\n    dispatch(updateItem({\n      ...selectedPost,\n      title: post === null || post === void 0 ? void 0 : post.title,\n      body: post === null || post === void 0 ? void 0 : post.body\n    }));\n    setModal(false);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      value: post.title,\n      onChange: e => setPost({\n        ...post,\n        title: e.target.value\n      }),\n      type: \"text\",\n      placeholder: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0437\\u0430\\u043C\\u0435\\u0442\\u043A\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      value: post.body,\n      onChange: e => setPost({\n        ...post,\n        body: e.target.value\n      }),\n      type: \"text\",\n      placeholder: \"\\u041E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435 \\u0437\\u0430\\u043C\\u0435\\u0442\\u043A\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: updatePost,\n      children: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(PostForm, \"sP5Zd+0bQlVri/NbpRQ+8a60ulk=\", false, function () {\n  return [useDispatch];\n});\n_c = PostForm;\nvar _c;\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"names":["Input","Button","React","useState","updateItem","useDispatch","jsxDEV","_jsxDEV","Fragment","_Fragment","PostForm","_ref","_s","update","setModal","isEdit","selectedPost","dispatch","post","setPost","title","body","updatePost","children","value","onChange","e","target","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/user/WebstormProjects/github/React-Redux-ToDo-App/src/components/organisms/forms/PostForm.tsx"],"sourcesContent":["import { Input } from 'src/components/atoms/Input';\nimport { Button } from 'src/components/atoms/buttons/Button';\nimport { Post } from 'src/types.ts';\n\nimport React, { useState } from 'react';\nimport {updateItem} from \"src/redux/reducers/posts.ts\";\nimport {useDispatch} from \"react-redux\";\n\ntype Props = {\n  update: (post: Post) => void;\n  setModal: (modal: boolean) => void;\n  isEdit?: boolean;\n  selectedPost?: Post;\n};\n\nexport const PostForm: React.FC<Props> = ({\n  update,\n  setModal,\n  isEdit = false,\n  selectedPost,\n}) => {\n  const dispatch = useDispatch();\n\n  const [post, setPost] = useState({\n    title: selectedPost?.title || '',\n    body: selectedPost?.body || '',\n  });\n\n  const updatePost = () => {\n    dispatch(updateItem({...selectedPost, title: post?.title, body: post?.body}))\n\n    setModal(false);\n  };\n\n  return (\n    <>\n      <Input\n        value={post.title}\n        onChange={(e) => setPost({ ...post, title: e.target.value })}\n        type=\"text\"\n        placeholder=\"Название заметки\"\n      />\n\n      <Input\n        value={post.body}\n        onChange={(e) => setPost({ ...post, body: e.target.value })}\n        type=\"text\"\n        placeholder=\"Описание заметки\"\n      />\n\n      <Button onClick={updatePost}>Сохранить</Button>\n    </>\n  );\n};\n"],"mappings":";;AAAA,SAASA,KAAK,QAAQ,4BAA4B;AAClD,SAASC,MAAM,QAAQ,qCAAqC;AAG5D,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAAQC,UAAU,QAAO,6BAA6B;AACtD,SAAQC,WAAW,QAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AASxC,OAAO,MAAMC,QAAyB,GAAGC,IAAA,IAKnC;EAAAC,EAAA;EAAA,IALoC;IACxCC,MAAM;IACNC,QAAQ;IACRC,MAAM,GAAG,KAAK;IACdC;EACF,CAAC,GAAAL,IAAA;EACC,MAAMM,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAE9B,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC;IAC/BiB,KAAK,EAAE,CAAAJ,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEI,KAAK,KAAI,EAAE;IAChCC,IAAI,EAAE,CAAAL,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEK,IAAI,KAAI;EAC9B,CAAC,CAAC;EAEF,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvBL,QAAQ,CAACb,UAAU,CAAC;MAAC,GAAGY,YAAY;MAAEI,KAAK,EAAEF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,KAAK;MAAEC,IAAI,EAAEH,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEG;IAAI,CAAC,CAAC,CAAC;IAE7EP,QAAQ,CAAC,KAAK,CAAC;EACjB,CAAC;EAED,oBACEP,OAAA,CAAAE,SAAA;IAAAc,QAAA,gBACEhB,OAAA,CAACP,KAAK;MACJwB,KAAK,EAAEN,IAAI,CAACE,KAAM;MAClBK,QAAQ,EAAGC,CAAC,IAAKP,OAAO,CAAC;QAAE,GAAGD,IAAI;QAAEE,KAAK,EAAEM,CAAC,CAACC,MAAM,CAACH;MAAM,CAAC,CAAE;MAC7DI,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC,eAEF1B,OAAA,CAACP,KAAK;MACJwB,KAAK,EAAEN,IAAI,CAACG,IAAK;MACjBI,QAAQ,EAAGC,CAAC,IAAKP,OAAO,CAAC;QAAE,GAAGD,IAAI;QAAEG,IAAI,EAAEK,CAAC,CAACC,MAAM,CAACH;MAAM,CAAC,CAAE;MAC5DI,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC,eAEF1B,OAAA,CAACN,MAAM;MAACiC,OAAO,EAAEZ,UAAW;MAAAC,QAAA,EAAC;IAAS;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eAC/C,CAAC;AAEP,CAAC;AAACrB,EAAA,CAtCWF,QAAyB;EAAA,QAMnBL,WAAW;AAAA;AAAA8B,EAAA,GANjBzB,QAAyB;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}